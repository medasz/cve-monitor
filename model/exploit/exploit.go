package exploit

import (
	"github-cve/db"
	"time"
)

type Exploit struct {
	ID                        uint       `json:"id" gorm:"type:int not null auto_increment comment '记录ID'"`
	DownloadExploit           string     `json:"download_exploit" gorm:"type:text null comment 'exploit下载链接'"`
	VulnerableApplication     string     `json:"vulnerable_application" gorm:"type:text null comment '易受攻击的应用程序'"`
	VulnerableApplicationLink string     `json:"vulnerable_application_link" gorm:"type:text null comment '易受攻击的应用程序的下载链接'"`
	Verified                  bool       `json:"verified" gorm:"type:tinyint(1) not null comment '已验证'"`
	Title                     string     `json:"title" gorm:"type:text null comment '标题'"`
	TitleLink                 string     `json:"title_link" gorm:"type:text null comment '详情链接'"`
	Type                      string     `json:"type" gorm:"type:text null comment '类型'"`
	Platform                  string     `json:"platform" gorm:"type:text null comment '平台'"`
	Author                    string     `json:"author" gorm:"type:text null comment '作者'"`
	Date                      time.Time  `json:"date" gorm:"type:date null comment '时间'"`
	VulnerabilityID           uint       `json:"vulnerability_id" gorm:"type:int not null comment '漏洞ID'"`
	CreatedAt                 *time.Time `json:"created_at" gorm:"type:timestamp not null default current_timestamp"`
	UpdatedAt                 *time.Time `json:"updated_at" gorm:"type:timestamp null on update current_timestamp"`
}

func (receiver *Exploit) TableName() string {
	return "exploit"
}

func CreateTable() error {
	return db.DB.Set("gorm:table_options", "ENGINE=InnoDB comment '对应的exploit'").AutoMigrate(new(Exploit))
}
