package alerts

import (
	"github-cve/db/db_exploit"
	"github-cve/db/db_vulnerability"
	"github-cve/lib"
	"log"
	"strings"
	"time"
)

var cveAlert = make(map[string]bool)

func Run() {
	for true {
		data, err := db_vulnerability.GetItemsByToday()
		if err != nil {
			log.Println(err)
			continue
		}

		log.Println(len(data))
		for _, tmp := range data {
			if _, ok := cveAlert[tmp.CVEID]; !ok {
				tmpData := new(lib.Data)
				exploitData, err := db_exploit.GetItemByVulnerabilityId(tmp.ID)
				if err != nil {
					log.Println(err)
				} else {
					tmpExpList := make([]string, 0)
					for _, tmpExp := range exploitData {
						tmpExpList = append(tmpExpList, tmpExp.TitleLink)
					}
					tmpData.ExploitLink = lib.Alert{Value: strings.Join(tmpExpList, "\n")}
				}

				tmpData.Cve = lib.Alert{Value: tmp.CVEID}
				tmpData.VulnerabilityType = lib.Alert{Value: tmp.VulnerabilityType}
				tmpData.CVSSScore = lib.Alert{Value: tmp.CVSSScore}
				tmpData.VulnerabilityDetails = lib.Alert{Value: tmp.VulnerabilityDetails}
				if err := lib.SendMessage(tmpData); err != nil {
					log.Println(err)
					continue
				}
				cveAlert[tmp.CVEID] = true
			}
		}
		time.Sleep(time.Minute)
	}
}
