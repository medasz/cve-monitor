package lib

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github-cve/config"
)

func SendMessage(data *Data) error {
	template := new(Template)
	token, err := GetToken()
	if err != nil {
		return err
	}
	user, err := GetUserList(token)
	if err != nil {
		return err
	}

	for _, openId := range user.Data.OpenId {
		template.Touser = openId
		template.TemplateId = config.WeChat.TemplateId
		template.Data = *data
		err := SendWeChat(token, template)
		if err != nil {
			continue
		}
	}
	return nil
}

type Template struct {
	Touser     string `json:"touser"`
	TemplateId string `json:"template_id"`
	Url        string `json:"url"`
	Data       Data   `json:"data"`
}
type Data struct {
	Cve                  Alert `json:"cve"`
	CVSSScore            Alert `json:"cvss_score"`
	VulnerabilityType    Alert `json:"vulnerability_type"`
	VulnerabilityDetails Alert `json:"vulnerability_details"`
	VulnerabilityLink    Alert `json:"vulnerability_link"`
	ExploitLink          Alert `json:"exploit_link"`
}
type Alert struct {
	Value string `json:"value"`
	Color string `json:"color"`
}

func SendWeChat(token *Token, template *Template) error {
	res, err := json.Marshal(template)
	if err != nil {
		return err
	}
	resp, err := http.Post(
		fmt.Sprintf(
			"https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=%s",
			token.AccessToken),
		"application/x-www-form-urlencoded",
		bytes.NewReader(res))
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	tmp, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}
	fmt.Println(string(tmp))
	return nil
}

type Token struct {
	AccessToken string `json:"access_token"`
	ExpiresIn   int    `json:"expires_in"`
}

func GetToken() (*Token, error) {
	token := new(Token)
	resp, err := http.Get(
		fmt.Sprintf(
			"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=%s&secret=%s",
			config.WeChat.AppId,
			config.WeChat.Secret))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	res, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(res, token)
	if err != nil {
		return nil, err
	}
	return token, nil
}

type User struct {
	Total int `json:"total"`
	Count int `json:"count"`
	Data  struct {
		OpenId []string `json:"openid"`
	} `json:"data"`
	NextOpenId string `json:"next_openid"`
}

func GetUserList(token *Token) (*User, error) {
	user := new(User)
	resp, err := http.Get(
		fmt.Sprintf(fmt.Sprintf("https://api.weixin.qq.com/cgi-bin/user/get?access_token=%s&next_openid=", token.AccessToken)),
	)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	res, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(res, user)
	return user, err
}
