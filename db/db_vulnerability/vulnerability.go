package db_vulnerability

import (
	"fmt"
	"github-cve/db"
	"github-cve/model/vulnerability"

	"gorm.io/gorm"
)

func DeleteItemByVulnerabilityId(vulnerabilityId uint) error {
	fmt.Println(vulnerabilityId)
	return db.DB.Where("id = ?", vulnerabilityId).Delete(new(vulnerability.Vulnerability)).Error
}

func GetItemByCveId(cveId string) (*vulnerability.Vulnerability, error) {
	data := new(vulnerability.Vulnerability)
	err := db.DB.Model(new(vulnerability.Vulnerability)).Where("cve_id = ?", cveId).First(data).Error
	return data, err
}

func FirstOrCreate(vulnerability *vulnerability.Vulnerability) error {
	fmt.Println(vulnerability)
	return db.DB.FirstOrCreate(vulnerability, vulnerability).Error
}

type CveInfo struct {
	CveId string `json:"cve_id"`
	Id    uint   `json:"id"`
}

func GetItems(f func(CveInfo)) error {
	results := make([]CveInfo, 0)
	// 每次批量处理 100 条
	result := db.DB.Table("vulnerability").FindInBatches(&results, 100, func(tx *gorm.DB, batch int) error {
		for _, result := range results {
			// 批量处理找到的记录
			fmt.Println(result)
			f(result)
		}
		return nil
	})
	return result.Error
}
